install.packages("tidyverse")
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
for (student in class){
print(student)
}
}
roll_call(students)
locker_combinations <- function(class){
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
locker_combinations(students)
my_data <- read.delim(credit_card_data-headers.txt)
my_data <- read.delim("credit_card_data-headers.txt", header = TRUE, sep = ",",dec = ",")
setwd("~/Desktop/ISY6501_Fall2023/ISY_6501/hw3-FA23")
?grubbs.test
??grubbs.test
rm(list = ())
#clean the R environment
rm(list = ls())
set.seed(10)
#load data into dataframe
crimedf <- read.table("uscrime.txt", stringsAsFactors = FALSE)
head(crimedf)
View(crimedf)
#load library
library(Outliers)
install.packages("Outliers")
#load library
library(Outliers)
#load library
library(outliers)
install.packages("outliers")
#load library
library(outliers)
grubbs.test(crimedf, type = 10)
grubbs.test(crimedf$crime, type = 10)
grubbs.test(crimedf$crime, type = 2)
grubbs.test(crimedf$crime, type = 11)
grubbs.test(crimedf$crime)
grubbs.test(crimedf$crime, opposite = TRUE)
grubbs.test(crimedf$crime, opposite = FALSE)
grubbs.test(crimedf, opposite = FALSE)
grubbs.test(crimedf(V16), opposite = FALSE)
#load data into dataframe
crimedf <- read.table("uscrime.txt", stringsAsFactors = FALSE, header = TRUE)
head(crimedf)
grubbs.test(crimedf(V16), opposite = FALSE)
grubbs.test(crimedf$Crime)
library(ggplot2)
library(tidyverse)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
horizontal = TRUE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime"
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
horizontal = FALSE)
#use grubbs.test to check the data set
grubbs.test(crimedf$Crime)
#clean the R environment
rm(list = ls())
set.seed(10)
#load data into dataframe
crimedf <- read.table("uscrime.txt", stringsAsFactors = FALSE, header = TRUE)
head(crimedf)
#load library
#install.packages("outliers")
library(outliers)
library(ggplot2)
library(tidyverse)
#use grubbs.test to check the data set
grubbs.test(crimedf$Crime)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
horizontal = FALSE)
View(crimedf)
View(crimedf)
crimedf %>%
ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point() +
geom_point(data=crimedf %>%
filter(p > 0.05),
pch = 21,
size=4,
colour = "red")
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
horizontal = FALSE)
crimedf %>%
ggplot(aes(x = population)) +
geom_point() +
geom_point(data=crimedf %>%
filter(population > 1700),
pch = 21,
size=4,
colour = "red")
crimedf %>%
ggplot(aes(x = population)) +
geom_point() +
geom_point(data=crimedf %>%
filter(population > 20),
pch = 21,
size=4,
colour = "red")
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population",
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
ylab = "Population",
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
ylab = "Crime Committed",
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE)
#use grubbs.test to check the data set
grubbs.test(crimedf$Crime, type = 10)
#use grubbs.test to check the data set
grubbs.test(crimedf$Crime, type = 11)
#use grubbs.test to check the data set
grubbs.test(crimedf$Crime, type = 10)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE)
abline(v=quantile(crimedf$Crime, c(0.25, 0.75)),col = "red")
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE,
notch = TRUE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE,
notch = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
x=fivenum(crimedf$Crime),
labels = fivenum(crimedf$Crime),
horizontal = FALSE,
notch = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
labels = fivenum(crimedf$Crime),
horizontal = FALSE,
notch = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
labels = fivenum(crimedf$Crime),
y=1.27,
horizontal = FALSE,
notch = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE,
notch = FALSE)
#As the result shown, the p-value = 0.07887 > alpha = 0.05. In this case, we don't have strong evidence
#
grubbs.test(crimedf$Crime, type = 10, opposite = TRUE, two.sided = TRUE)
#As the result shown, the p-value = 0.07887 > alpha = 0.05. In this case, we don't have strong evidence
#
grubbs.test(crimedf$Crime, type = 10, opposite = FALSE, two.sided = FALSE)
#As the result shown, the p-value = 0.07887 > alpha = 0.05. In this case, we don't have strong evidence
#
grubbs.test(crimedf$Crime, type = 10, opposite = TRUE, two.sided = FALSE)
#test the minimum value
grubbs.test(crimedf$Crime, type = 11, opposite = FALSE, two.sided = FALSE)
#test the minimum value
grubbs.test(crimedf$Crime, type = 11, opposite = TRUE, two.sided = FALSE)
#test the minimum value
grubbs.test(crimedf$Crime, type = 11, opposite = TRUE, two.sided = FALSE)
#plot box graph to visualize finding
boxplot(crimedf$Crime,
main = "Outlier for Crime in U.S. Crime",
xlab = "Population Density",
ylab = "Crime Committed",
horizontal = FALSE)
#test the minimum value
grubbs.test(crimedf$Crime, type = 11, opposite = TRUE, two.sided = FALSE)
#using type =11 to test for 2 outliers on opposite tails.
grubbs.test(crimedf$Crime, type = 11, opposite = FALSE, two.sided = FALSE)
head(temp)
temp <- read.table("temps.txt", stringsAsFactors = FALSE, header = TRUE)
head(temp)
View(temp)
install.packages("lubridate")
install.packages("lubridate")
#install.packages("lubridate")
library(repr)
library(reshape)
# create a mean of the average data for better insight of average temperature on each day from July to October
avg_temp <- mean(temp,trim = 0, na.rm = TRUE)
# create a mean of the average data for better insight of average temperature on each day from July to October
avg_temp <- rowMean(temp[c(2:length(temp))], dims = 1, na.rm = TRUE)
# create a mean of the average data for better insight of average temperature on each day from July to October
avg_temp <- rowMeans(temp[c(2:length(temp))], dims = 1, na.rm = TRUE)
View(avg_temp)
# create a mean of the average data for better insight of average temperature on each day from July to October
avg_temp <- rowMeans(temp[c(2:length(temp))], na.rm = TRUE)
View(avg_temp)
mu <- mean(avg_temp)
grubbs.test(temp$X1996)
grubbs.test(temp)
boxplot(avg_temp)
boxplot(temp)
barplot(temp)
barplot(avg_temp)
# create a mean of the average data of each row for better insight of average temperature on
#the same day every year.
avg_temp <- aggregate(TEMP~YEAR, data = temp, mean)
newtemp <- melt(temp, id.vars = c("DAY"),variable.name = "YEAR",value.name="TEMP")
head(newtemp)
# create a mean of the average data of each row for better insight of average temperature on
#the same day every year.
avg_temp <- aggregate(TEMP~YEAR, data = newtemp, mean)
# create a mean of the average data of each row for better insight of average temperature on
#the same day every year.
avg_temp <- aggregate(value~variable.names, data = newtemp, mean)
newtemp <- melt(temp, id.vars = c("DAY"),variable.name = "YEAR", value.name="TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"),variable_name = "YEAR", value_name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"),variable_name = "YEAR", value_name = "TEMP")
head(newtemp)
# create a mean of the average data of each row for better insight of average temperature on
#the same day every year.
avg_temp <- aggregate(value~YEAR, data = newtemp, mean)
newtemp <- melt(temp, id.vars = c("DAY"),variable_name = "YEAR",value.names = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"),variable_name = "YEAR",value.name = "TEMP")
newtemp <- melt(temp, id.vars = c("DAY"),variable.names = "YEAR", value.name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"),variable_name = "YEAR", value.name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY", "YEAR", "TEMP"))
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR", value_name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"), value.name = "TEMP", variable_name = "YEAR")
head(newtemp)
library(reshape2)
newtemp <- melt(temp, id.vars = c("DAY"), value.name = "TEMP", variable_name = "YEAR")
head(newtemp)
library(repr)
library(reshape)
library(reshape2)
newtemp <- melt(temp, id.vars = c("DAY"), variable.names = "YEAR", value.name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR", value.name = "TEMP")
head(newtemp)
library(reshape)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR", value.name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR", value_name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR")
head(newtemp)
library(reshape2)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR")
head(newtemp)
rm(list = ls())
temp <- read.table("temps.txt", stringsAsFactors = FALSE, header = TRUE)
head(temp)
newtemp <- melt(temp, id.vars = c("DAY"), variable_name = "YEAR")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"), value_name = "TEMP")
head(newtemp)
newtemp <- melt(temp, id.vars = c("DAY"))
head(newtemp)
